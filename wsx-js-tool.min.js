(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("anyNameIsOk-amd", [], factory);
	else if(typeof exports === 'object')
		exports["anyNameIsOk-common"] = factory();
	else
		root["anyNameIsOk-root"] = factory();
})(this, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _tool_commonMethods__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _tool_date__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _tool_WebsocketHeart__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);



const wsxJsTool = {
  getUrlParamByName: _tool_commonMethods__WEBPACK_IMPORTED_MODULE_0__.getUrlParamByName,
  trim: _tool_commonMethods__WEBPACK_IMPORTED_MODULE_0__.trim,
  getToday: _tool_date__WEBPACK_IMPORTED_MODULE_1__.getToday,
  getDaysAgo: _tool_date__WEBPACK_IMPORTED_MODULE_1__.getDaysAgo,
  getFormatDate: _tool_date__WEBPACK_IMPORTED_MODULE_1__.getFormatDate,
  WebsocketHeart: _tool_WebsocketHeart__WEBPACK_IMPORTED_MODULE_2__.default
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (wsxJsTool); // 加上babel
// module.exports = wsxJsTool;

/***/ }),
/* 1 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getUrlParamByName": () => /* binding */ getUrlParamByName,
/* harmony export */   "trim": () => /* binding */ trim
/* harmony export */ });
function getUrlParamByName(name) {
  let reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
  let r = null; // location.search :设置/获取url？后面的部分 （?q=123&page=1&type=note）

  if (window.location.href.split('?')[1]) {
    // (q=123&page=1&type=note)
    r = window.location.href.split('?')[1].match(reg); // /(^|&)enterpriseId=([^&]*)(&|$)/i
  }

  if (r != null) {
    return decodeURIComponent(r[2]);
  }

  ;
  return null;
}

function trim(str) {
  // 去掉首尾两端的空格(^\s*)|(\s*$)
  return str.replace(/(^\s*)|(\s*$)/g, '');
}



/***/ }),
/* 2 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getToday": () => /* binding */ getToday,
/* harmony export */   "getDaysAgo": () => /* binding */ getDaysAgo,
/* harmony export */   "getFormatDate": () => /* binding */ getFormatDate
/* harmony export */ });
/**
 * getToday returns Date() Obj which set date to today, and set time to 00:00:00
 * */
function getToday(withTime = false) {
  const today = new Date();

  if (!withTime) {
    today.setHours(0);
    today.setMinutes(0);
    today.setSeconds(0);
  }

  today.setMilliseconds(0);
  return today;
} //


function getDaysAgo(day, withTime = false) {
  const daysAgo = new Date();
  daysAgo.setDate(daysAgo.getDate() - day + 1);

  if (!withTime) {
    daysAgo.setHours(0);
    daysAgo.setMinutes(0);
    daysAgo.setSeconds(0);
  }

  daysAgo.setMilliseconds(0);
  return daysAgo;
} // 把Date类型，或时间戳 转换成2020-11-24 的字符串


function getFormatDate(date) {
  const newDate = new Date(date);
  const Y = `${newDate.getFullYear()}-`;
  const M = `${newDate.getMonth() + 1 < 10 ? `0${newDate.getMonth() + 1}` : newDate.getMonth() + 1}-`;
  const D = `${newDate.getDate() < 10 ? `0${newDate.getDate()}` : newDate.getDate()} `;
  return `${Y}${M}${D}`;
}



/***/ }),
/* 3 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* eslint-disable */

/**
 * `WebsocketHeartbeatJs` constructor.wsx
 *
 * @param {Object} opts
 * {
 *  url                  websocket链接地址
 *  pingTimeout 未收到消息多少秒之后发送ping请求，默认30秒
    pongTimeout  发送ping之后，未收到消息超时时间，默认3秒-网络延迟预留时间
    reconnectTimeout
    pingMsg
 * }
 * @api public
 */
// 构造函数
function WebsocketHeart({
  url,
  pingTimeout = 30000,
  pongTimeout = 4000,
  reconnectTimeout = 5000,
  pingMsg = 'ping',
  maxReCount = 10
}) {
  this.opts = {
    url: url,
    pingTimeout: pingTimeout,
    pongTimeout: pongTimeout,
    reconnectTimeout: reconnectTimeout,
    pingMsg: JSON.stringify({
      type: 1,
      timestamp: new Date().getTime(),
      data: 'ping'
    }),
    maxReCount: maxReCount // 最大重连次数

  };
  this.ws = null; //this 为 new出来的实例对象， this（实例）上如果没有方法，会追到构造函数的原型连上 - 实现继承 （构造函数相当于父类）

  this.curReCount = 0; // TODO this实例 override hook(钩子) function

  this.onclose = () => {};

  this.onerror = () => {};

  this.onopen = () => {};

  this.onmessage = () => {};

  this.onreconnect = () => {};

  this.createWebSocket();
}

WebsocketHeart.prototype.createWebSocket = function () {
  try {
    this.ws = new WebSocket(this.opts.url);
    this.initHook(); // hook丰富 (实例钩子)
  } catch (e) {
    this.reconnect();
    throw e;
  }
}; // ws监听事件，调用实例重写的hook方法


WebsocketHeart.prototype.initHook = function () {
  this.ws.onclose = () => {
    this.onclose(); // 实例hook （this指向实例）

    console.log('onClose: 执行this.reconnect hook');
    this.reconnect(); // this实例没有该方法，则调用父类的
  };

  this.ws.onerror = () => {
    this.onerror(); // 实例hook

    this.reconnect();
  }; // 心跳入口


  this.ws.onopen = () => {
    this.onopen(); // 实例hook
    // 心跳检测重置

    this.heartCheck();
  };

  this.ws.onmessage = event => {
    //如果获取到消息，心跳检测重置
    //拿到任何消息都说明当前连接是正常的
    this.heartCheck();
    this.onmessage(event); // 实例hook
  };
};

WebsocketHeart.prototype.reconnect = function () {
  if (this.curReCount >= this.opts.maxReCount) {
    console.log('超过最大连接次数，不再连接');
    return;
  }

  if (this.forbidReconnect) {
    console.log('手动关闭，禁止重连');
    return;
  }

  ;

  if (this.lockReconnect) {
    return;
  }

  ;
  this.curReCount += 1;
  console.log(`当前尝试第${this.curReCount}次链接..`);
  this.lockReconnect = true; // 重连后，超过reconnectTimeout-s后才可以再重连

  this.onreconnect(); // 实例 hook
  //没连接上会一直重连，设置延迟避免请求过多

  setTimeout(() => {
    this.createWebSocket();
    this.lockReconnect = false;
  }, this.opts.reconnectTimeout);
}; // 实例方法


WebsocketHeart.prototype.send = function (msg) {
  this.ws.send(msg);
}; // 心跳机制


WebsocketHeart.prototype.heartCheck = function () {
  this.heartReset();
  this.heartStart();
};

WebsocketHeart.prototype.heartStart = function () {
  if (this.forbidReconnect) return; //不再重连就不再执行心跳
  // 30s 检查一次连接的链接情况

  this.pingTimeoutId = setTimeout(() => {
    // 这里发送一个心跳，后端收到后，返回一个心跳消息，
    // onmessage拿到返回的心跳就说明连接正常
    this.ws.send(this.opts.pingMsg); //如果超过一定时间还没重置，说明后端主动断开了

    this.pongTimeoutId = setTimeout(() => {
      //如果onclose会执行reconnect，我们执行 ws.doClose()就行了.如果直接执行reconnect 会触发onclose导致重连两次
      console.log('心跳异常，ws.close()');
      this.ws.close();
    }, this.opts.pongTimeout); // pongTimeout-s 没有监听到onmessage 就 ws.close,促发 reconnect()
  }, this.opts.pingTimeout); // pingTimeout-s 之后发送ping
};

WebsocketHeart.prototype.heartReset = function () {
  clearTimeout(this.pingTimeoutId);
  clearTimeout(this.pongTimeoutId);
}; // 人为 关闭连接


WebsocketHeart.prototype.close = function () {
  //如果手动关闭连接，不再重连
  this.forbidReconnect = true;
  this.heartReset();
  this.ws.close();
};

if (window) window.WebsocketHeart = WebsocketHeart;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WebsocketHeart);

/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })()
.default;
});